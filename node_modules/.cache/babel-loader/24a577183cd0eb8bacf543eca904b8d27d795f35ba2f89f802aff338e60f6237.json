{"ast":null,"code":"var _jsxFileName = \"/Users/jameskarui/Desktop/MYAPP/evite-app/src/components/LandingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LandingPageHeader from './ui/LandingPageHeader';\nimport NavigationBar from './ui/NavigationBar';\nimport WelcomeSection from './ui/WelcomeSection';\nimport EventCard from './ui/EventCard';\nimport usePageNavigation from './ui/usePageNavigation';\n\n// Main Landing Page component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LandingPage() {\n  _s();\n  // --- State Management ---\n  const [events, setEvents] = useState([]);\n  const [participants, setParticipants] = useState([]);\n  const [rsvps, setRsvps] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('HOME');\n  const [userName, setUserName] = useState();\n  const navigate = usePageNavigation();\n  const currentUserId = 5; // Static current user ID\n\n  // --- API Endpoints ---\n  const eventsEndpoint = \"http://localhost:3001/api/create_event\";\n  const inviteesEndpoint = \"http://localhost:3001/api/invitees\";\n  const networkEndpoint = \"http://localhost:3001/api/load_network\";\n  const rsvpEndpoint = \"http://localhost:3001/api/rsvp\";\n\n  //Data fetching effect\n  useEffect(() => {\n    const fetchAllData = async () => {\n      try {\n        setLoading(true);\n        // Fetch all data in parallel\n        const [eventsRes, inviteesRes, networkRes, rsvpsRes] = await Promise.all([fetch(eventsEndpoint), fetch(inviteesEndpoint), fetch(networkEndpoint), fetch(rsvpEndpoint)]);\n        if (!eventsRes.ok || !inviteesRes.ok || !networkRes.ok || !rsvpsRes.ok) {\n          throw new Error(`HTTP error! Failed to fetch data.`);\n        }\n        const eventsData = await eventsRes.json();\n        const inviteesData = await inviteesRes.json();\n        const networkData = await networkRes.json();\n        const rsvpsData = await rsvpsRes.json();\n        const user = networkData.find(u => u.id === currentUserId);\n        setUserName(user.first_name + '  ' + user.last_name);\n\n        // Process and set events\n        const processedEvents = eventsData.map(event => ({\n          id: event.id,\n          name: event.title,\n          location: event.location,\n          event_date: event.event_date,\n          time: event.event_time,\n          description: event.description,\n          type: event.event_type\n        }));\n        setEvents(processedEvents);\n\n        // Enrich participants with names and set state\n        const enrichedParticipants = inviteesData.map(invitee => {\n          const user = networkData.find(u => u.id === invitee.invitee);\n          return {\n            ...invitee,\n            name: user ? `${user.first_name} ${user.last_name}` : 'Unknown User'\n          };\n        });\n        setParticipants(enrichedParticipants);\n\n        // Set initial RSVPs\n        setRsvps(rsvpsData);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Error loading events\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllData();\n  }, []);\n\n  // --- Event Handlers ---\n  const handleReturnHome = () => {\n    console.log(\"Returning to home\");\n    setActiveTab('HOME');\n  };\n  const handleUserInfo = () => {\n    console.log(\"Show user info\");\n  };\n  const handleCreateEvent = () => {\n    navigate('../CreateEvent');\n  };\n  const handleSetActive = navItem => {\n    setActiveTab(navItem);\n    console.log(`Navigating to: ${navItem}`);\n  };\n  async function handleRSVP(eventId, response) {\n    console.log(`RSVP for event ${eventId}: ${response}`);\n    // Send RSVP to the backend with, userId(Who RSVP'ed), eventId (Event they will or not go to)\n\n    const rsvpStatus = response === 'yes' ? 'going' : 'not_going';\n    const rsvpData = {\n      userId: currentUserId,\n      eventId: eventId,\n      status: rsvpStatus\n    };\n    //console.log(\"rsvp data: \", rsvpData);\n\n    // --- Optimistic UI Update ---\n    // Instantly update the UI without waiting for the server\n    setRsvps(currentRsvps => {\n      const existingRsvpIndex = currentRsvps.findIndex(r => r.user_id === currentUserId && r.event_id === eventId);\n      const newRsvps = [...currentRsvps];\n      if (existingRsvpIndex > -1) {\n        newRsvps[existingRsvpIndex] = {\n          ...newRsvps[existingRsvpIndex],\n          status: rsvpStatus\n        };\n      } else {\n        newRsvps.push({\n          event_id: eventId,\n          user_id: currentUserId,\n          status: rsvpStatus\n        });\n      }\n      return newRsvps;\n    });\n    // --- Send to Backend ---\n    try {\n      const fetchResponse = await fetch(rsvpEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(rsvpData)\n      });\n      if (!fetchResponse.ok) {\n        console.error(\"Error with RSVP Status:\", fetchResponse.status);\n        // Note: Here you might want to revert the optimistic update\n      }\n    } catch (error) {\n      console.error(\"Failed to send request:\", error);\n      // Note: Also revert optimistic update here\n    }\n  }\n  ;\n\n  // --- Render Logic ---\n  const renderEventCards = (eventList, isPrivate) => {\n    if (eventList.length === 0) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"|  +--------------------------------------+  |\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isPrivate ? \"|  |     No private events available       |  |\" : \"|  |     No public events available       |  |\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"|  +--------------------------------------+  |\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"|                                            |\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n    return eventList.map(event => {\n      // Find the current user's RSVP status for this event\n      const userRsvp = rsvps.find(r => r.user_id === currentUserId && r.event_id === event.id);\n      const rsvpStatus = userRsvp ? userRsvp.status : null;\n\n      // Get all participants for this event and add their RSVP status\n      const eventParticipants = participants.filter(p => p.event_id === event.id).map(p => {\n        const participantRsvp = rsvps.find(r => r.user_id === p.invitee && r.event_id === event.id);\n        return {\n          ...p,\n          status: participantRsvp ? participantRsvp.status : 'Pending'\n        };\n      });\n      return /*#__PURE__*/_jsxDEV(EventCard, {\n        event: event,\n        isPrivate: isPrivate,\n        onRSVP: handleRSVP,\n        rsvpStatus: rsvpStatus,\n        participants: eventParticipants // Pass down the processed participants\n      }, `${event.type}-${event.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  const privateEvents = events.filter(event => event.type === 'private');\n  const publicEvents = events.filter(event => event.type === 'public');\n  console.log(\"There are the public events\");\n\n  // --- Component Rendering ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ascii-container\",\n    style: {\n      fontFamily: 'monospace',\n      backgroundColor: '#f0f0f0',\n      padding: '20px',\n      borderRadius: '8px',\n      whiteSpace: 'pre'\n    },\n    children: [/*#__PURE__*/_jsxDEV(LandingPageHeader, {\n      onReturnHome: handleReturnHome,\n      onUserInfo: handleUserInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WelcomeSection, {\n      userName: userName,\n      onCreateEvent: handleCreateEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"|           Loading events...                |\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"|           \", error, \"                          |\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"|           [ Exclusive E-vites ]            |\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"|                                            |\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this), renderEventCards(privateEvents, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"|--------------------------------------------|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"|            \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"clickable\",\n          children: \"[ Public E-vites ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 39\n        }, this), \"  |\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this), renderEventCards(publicEvents, false)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(NavigationBar, {\n      activeTab: activeTab,\n      onSetActive: handleSetActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n                .clickable { \n                    cursor: pointer;\n                    color: blue; \n                }\n                .create-event-link {\n                    color: green;\n                    font-weight: bold;\n                }\n                .card-text {\n                    color: #333;\n                }\n                .checkbox-option {\n                    display: inline;\n                    cursor: pointer;\n                }\n                .checkbox-option input[type=\"checkbox\"] {\n                    margin-right: 5px;\n                    vertical-align: middle;\n                }\n                .nav-item { \n                    cursor: pointer; \n                    margin-right: 5px;\n                }\n                .nav-item.active { \n                    font-weight: bold; \n                    color: #000;\n                }\n                .nav-item:hover {\n                    text-decoration: underline;\n                }\n                .ascii-container {\n                    max-width: 600px;\n                    margin: 0 auto;\n                }\n            `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n}\n_s(LandingPage, \"P0c/8hllkDQSpZGxNbXESGcPJY4=\", false, function () {\n  return [usePageNavigation];\n});\n_c = LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useState","useEffect","LandingPageHeader","NavigationBar","WelcomeSection","EventCard","usePageNavigation","jsxDEV","_jsxDEV","Fragment","_Fragment","LandingPage","_s","events","setEvents","participants","setParticipants","rsvps","setRsvps","loading","setLoading","error","setError","activeTab","setActiveTab","userName","setUserName","navigate","currentUserId","eventsEndpoint","inviteesEndpoint","networkEndpoint","rsvpEndpoint","fetchAllData","eventsRes","inviteesRes","networkRes","rsvpsRes","Promise","all","fetch","ok","Error","eventsData","json","inviteesData","networkData","rsvpsData","user","find","u","id","first_name","last_name","processedEvents","map","event","name","title","location","event_date","time","event_time","description","type","event_type","enrichedParticipants","invitee","err","console","handleReturnHome","log","handleUserInfo","handleCreateEvent","handleSetActive","navItem","handleRSVP","eventId","response","rsvpStatus","rsvpData","userId","status","currentRsvps","existingRsvpIndex","findIndex","r","user_id","event_id","newRsvps","push","fetchResponse","method","headers","body","JSON","stringify","renderEventCards","eventList","isPrivate","length","children","fileName","_jsxFileName","lineNumber","columnNumber","userRsvp","eventParticipants","filter","p","participantRsvp","onRSVP","privateEvents","publicEvents","className","style","fontFamily","backgroundColor","padding","borderRadius","whiteSpace","onReturnHome","onUserInfo","onCreateEvent","onSetActive","_c","$RefreshReg$"],"sources":["/Users/jameskarui/Desktop/MYAPP/evite-app/src/components/LandingPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LandingPageHeader from './ui/LandingPageHeader';\nimport NavigationBar from './ui/NavigationBar';\nimport WelcomeSection from './ui/WelcomeSection';\nimport EventCard from './ui/EventCard';\nimport usePageNavigation from './ui/usePageNavigation';\n\n\n\n// Main Landing Page component\nexport default function LandingPage() {\n    // --- State Management ---\n    const [events, setEvents] = useState([]);\n    const [participants, setParticipants] = useState([]);\n    const [rsvps, setRsvps] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [activeTab, setActiveTab] = useState('HOME');\n    const [userName, setUserName] = useState();\n    const navigate = usePageNavigation();\n    const currentUserId = 5; // Static current user ID\n\n    // --- API Endpoints ---\n    const eventsEndpoint = \"http://localhost:3001/api/create_event\";\n    const inviteesEndpoint = \"http://localhost:3001/api/invitees\";\n    const networkEndpoint = \"http://localhost:3001/api/load_network\";\n    const rsvpEndpoint = \"http://localhost:3001/api/rsvp\";\n    \n    //Data fetching effect\n    useEffect(() => {\n        const fetchAllData = async () => {\n            try {\n                setLoading(true);\n                // Fetch all data in parallel\n                const [eventsRes, inviteesRes, networkRes, rsvpsRes] = await Promise.all([\n                    fetch(eventsEndpoint),\n                    fetch(inviteesEndpoint),\n                    fetch(networkEndpoint),\n                    fetch(rsvpEndpoint),\n                ]);\n\n                if (!eventsRes.ok || !inviteesRes.ok || !networkRes.ok || !rsvpsRes.ok) {\n                    throw new Error(`HTTP error! Failed to fetch data.`);\n                }\n\n                const eventsData = await eventsRes.json();\n                const inviteesData = await inviteesRes.json();\n                const networkData = await networkRes.json();\n                const rsvpsData = await rsvpsRes.json();\n\n                const user = networkData.find(u => u.id === currentUserId);\n                setUserName(user.first_name + '  ' + user.last_name);\n                \n\n                \n                // Process and set events\n                const processedEvents = eventsData.map(event => ({\n                    id: event.id,\n                    name: event.title,\n                    location: event.location,\n                    event_date: event.event_date,\n                    time: event.event_time,\n                    description: event.description,\n                    type: event.event_type\n                }));\n                setEvents(processedEvents);\n\n                // Enrich participants with names and set state\n                const enrichedParticipants = inviteesData.map(invitee => {\n                    const user = networkData.find(u => u.id === invitee.invitee);\n                    return {\n                        ...invitee,\n                        name: user ? `${user.first_name} ${user.last_name}` : 'Unknown User',\n                    };\n                });\n                setParticipants(enrichedParticipants);\n                \n                // Set initial RSVPs\n                setRsvps(rsvpsData);\n\n            } catch (err) {\n                console.error(\"Error fetching data:\", err);\n                setError(\"Error loading events\");\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchAllData();\n    }, []);\n\n    \n    // --- Event Handlers ---\n    const handleReturnHome = () => {\n        console.log(\"Returning to home\");\n        setActiveTab('HOME');\n    };\n\n    const handleUserInfo = () => {\n        console.log(\"Show user info\");\n    };\n\n    const handleCreateEvent = () => {\n        navigate('../CreateEvent');\n    };\n\n    const handleSetActive = (navItem) => {\n        setActiveTab(navItem);\n        console.log(`Navigating to: ${navItem}`);\n    };\n\n    async function handleRSVP(eventId, response){\n        console.log(`RSVP for event ${eventId}: ${response}`);\n        // Send RSVP to the backend with, userId(Who RSVP'ed), eventId (Event they will or not go to)\n\n        const rsvpStatus = response === 'yes' ? 'going' : 'not_going';\n        const rsvpData = {\n            userId: currentUserId, \n            eventId: eventId,\n            status: rsvpStatus, \n        }\n        //console.log(\"rsvp data: \", rsvpData);\n\n        // --- Optimistic UI Update ---\n        // Instantly update the UI without waiting for the server\n        setRsvps(currentRsvps => {\n            const existingRsvpIndex = currentRsvps.findIndex(r => r.user_id === currentUserId && r.event_id === eventId);\n            const newRsvps = [...currentRsvps];\n            if (existingRsvpIndex > -1) {\n                newRsvps[existingRsvpIndex] = { ...newRsvps[existingRsvpIndex], status: rsvpStatus };\n            } else {\n                newRsvps.push({ event_id: eventId, user_id: currentUserId, status: rsvpStatus });\n            }\n            return newRsvps;\n        });\n        // --- Send to Backend ---\n        try {\n            const fetchResponse = await fetch(rsvpEndpoint, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(rsvpData),\n            });\n\n            if (!fetchResponse.ok) {\n                console.error(\"Error with RSVP Status:\", fetchResponse.status);\n                // Note: Here you might want to revert the optimistic update\n            }\n            } catch (error) {\n                console.error(\"Failed to send request:\", error);\n                // Note: Also revert optimistic update here\n            }\n    };\n\n    // --- Render Logic ---\n    const renderEventCards = (eventList, isPrivate) => {\n        if (eventList.length === 0) {\n            return (\n                <>\n                    <div>|  +--------------------------------------+  |</div>\n                    <div>{isPrivate ? \"|  |     No private events available       |  |\" : \"|  |     No public events available       |  |\"}</div>\n                    <div>|  +--------------------------------------+  |</div>\n                    <div>|                                            |</div>\n                </>\n            );\n        }\n\n\n     return eventList.map(event => {\n            // Find the current user's RSVP status for this event\n            const userRsvp = rsvps.find(r => r.user_id === currentUserId && r.event_id === event.id);\n            const rsvpStatus = userRsvp ? userRsvp.status : null;\n\n            // Get all participants for this event and add their RSVP status\n            const eventParticipants = participants\n                .filter(p => p.event_id === event.id)\n                .map(p => {\n                    const participantRsvp = rsvps.find(r => r.user_id === p.invitee && r.event_id === event.id);\n                    return { ...p, status: participantRsvp ? participantRsvp.status : 'Pending' };\n                });\n            return (\n                <EventCard\n                    key={`${event.type}-${event.id}`}\n                    event={event}\n                    isPrivate={isPrivate}\n                    onRSVP={handleRSVP}\n                    rsvpStatus={rsvpStatus}\n                    participants={eventParticipants} // Pass down the processed participants\n                />\n            );\n        });\n    };\n\n    const privateEvents = events.filter(event => event.type === 'private');\n    const publicEvents = events.filter(event => event.type === 'public');\n    console.log(\"There are the public events\");\n\n    // --- Component Rendering ---\n    return (\n        <div className=\"ascii-container\" style={{ \n            fontFamily: 'monospace', \n            backgroundColor: '#f0f0f0', \n            padding: '20px', \n            borderRadius: '8px', \n            whiteSpace: 'pre' \n        }}>\n            <LandingPageHeader onReturnHome={handleReturnHome} onUserInfo={handleUserInfo} />\n            \n            <WelcomeSection userName={userName} onCreateEvent={handleCreateEvent} />\n            \n            {loading ? (\n                <div>|           Loading events...                |</div>\n            ) : error ? (\n                <div>|           {error}                          |</div>\n            ) : (\n                <>\n                    <div>|           [ Exclusive E-vites ]            |</div>\n                    <div>|                                            |</div>\n                    {renderEventCards(privateEvents, true)}\n                    \n                    <div>|--------------------------------------------|</div>\n                    \n                    <div>|            <span className=\"clickable\">[ Public E-vites ]</span>  |</div>\n                    {renderEventCards(publicEvents, false)}\n                </>\n            )}\n            \n            \n            <NavigationBar activeTab={activeTab} onSetActive={handleSetActive} />\n            \n            <style>{`\n                .clickable { \n                    cursor: pointer;\n                    color: blue; \n                }\n                .create-event-link {\n                    color: green;\n                    font-weight: bold;\n                }\n                .card-text {\n                    color: #333;\n                }\n                .checkbox-option {\n                    display: inline;\n                    cursor: pointer;\n                }\n                .checkbox-option input[type=\"checkbox\"] {\n                    margin-right: 5px;\n                    vertical-align: middle;\n                }\n                .nav-item { \n                    cursor: pointer; \n                    margin-right: 5px;\n                }\n                .nav-item.active { \n                    font-weight: bold; \n                    color: #000;\n                }\n                .nav-item:hover {\n                    text-decoration: underline;\n                }\n                .ascii-container {\n                    max-width: 600px;\n                    margin: 0 auto;\n                }\n            `}</style>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}